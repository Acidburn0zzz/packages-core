--- sched-bfs-424.patch.orig	2014-03-06 21:24:26.680539373 +0100
+++ sched-bfs-424.patch		2014-03-12 06:53:52.064370179 +0100
@@ -609,7 +609,7 @@ Index: linux-3.4-ck3/include/linux/sched
  /* Can be ORed in to make sure the process is reverted back to SCHED_NORMAL on fork */
  #define SCHED_RESET_ON_FORK     0x40000000
  
-@@ -268,8 +275,6 @@ extern asmlinkage void schedule_tail(str
+@@ -269,8 +276,6 @@ extern asmlinkage void schedule_tail(str
  extern void init_idle(struct task_struct *idle, int cpu);
  extern void init_idle_bootup_task(struct task_struct *idle);
  
@@ -618,7 +618,7 @@ Index: linux-3.4-ck3/include/linux/sched
  #if defined(CONFIG_SMP) && defined(CONFIG_NO_HZ)
  extern void select_nohz_load_balancer(int stop_tick);
  extern void set_cpu_sd_state_idle(void);
-@@ -1270,15 +1275,31 @@ struct task_struct {
+@@ -1276,15 +1281,31 @@ struct task_struct {
  
  #ifdef CONFIG_SMP
  	struct llist_node wake_entry;
@@ -649,10 +649,10 @@ Index: linux-3.4-ck3/include/linux/sched
  	struct sched_entity se;
  	struct sched_rt_entity rt;
 +#endif
- 
- #ifdef CONFIG_PREEMPT_NOTIFIERS
- 	/* list of struct preempt_notifier: */
-@@ -1390,6 +1411,9 @@ struct task_struct {
+ #ifdef CONFIG_CGROUP_SCHED
+ 	struct task_group *sched_task_group;
+ #endif
+@@ -1399,6 +1420,9 @@ struct task_struct {
  	int __user *clear_child_tid;		/* CLONE_CHILD_CLEARTID */
  
  	cputime_t utime, stime, utimescaled, stimescaled;
@@ -662,7 +662,7 @@ Index: linux-3.4-ck3/include/linux/sched
  	cputime_t gtime;
  #ifndef CONFIG_VIRT_CPU_ACCOUNTING
  	cputime_t prev_utime, prev_stime;
-@@ -1619,6 +1643,64 @@ struct task_struct {
+@@ -1628,6 +1652,64 @@ struct task_struct {
  #endif
  };
  
@@ -727,7 +727,7 @@ Index: linux-3.4-ck3/include/linux/sched
  /* Future-safe accessor for struct task_struct's cpus_allowed. */
  #define tsk_cpus_allowed(tsk) (&(tsk)->cpus_allowed)
  
-@@ -1636,10 +1718,20 @@ struct task_struct {
+@@ -1645,10 +1727,20 @@ struct task_struct {
   */
  
  #define MAX_USER_RT_PRIO	100
@@ -750,7 +750,7 @@ Index: linux-3.4-ck3/include/linux/sched
  
  static inline int rt_prio(int prio)
  {
-@@ -2002,7 +2094,7 @@ extern unsigned long long
+@@ -2019,7 +2111,7 @@ extern unsigned long long
  task_sched_runtime(struct task_struct *task);
  
  /* sched_exec is called by processes performing an exec */
@@ -759,7 +759,7 @@ Index: linux-3.4-ck3/include/linux/sched
  extern void sched_exec(void);
  #else
  #define sched_exec()   {}
-@@ -2705,7 +2797,7 @@ static inline unsigned int task_cpu(cons
+@@ -2721,7 +2813,7 @@ static inline unsigned int task_cpu(cons
  	return 0;
  }
  
