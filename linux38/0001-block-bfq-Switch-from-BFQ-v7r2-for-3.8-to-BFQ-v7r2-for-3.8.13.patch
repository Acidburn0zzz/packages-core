From 629b8a4fb2f415787da38d0f091b78bce5574fdc Mon Sep 17 00:00:00 2001
From: Paolo Valente <paolo.valente@unimore.it>
Date: Sat, 8 Mar 2014 02:00:31 +0100
Subject: [PATCH] block, bfq: Switch from BFQ-v7r2 for 3.8 to BFQ-v7r2 for
 3.8.13

Signed-off-by: Paolo Valente <paolo.valente@unimore.it>
Signed-off-by: Arianna Avanzini <avanzini.arianna@gmail.com>
---
 block/bfq-cgroup.c | 22 +++++++++++++---------
 1 file changed, 13 insertions(+), 9 deletions(-)

diff --git a/block/bfq-cgroup.c b/block/bfq-cgroup.c
index 94be175..804ffaf 100644
--- a/block/bfq-cgroup.c
+++ b/block/bfq-cgroup.c
@@ -44,9 +44,10 @@ static struct bfq_group *bfqio_lookup_group(struct bfqio_cgroup *bgrp,
 					    struct bfq_data *bfqd)
 {
 	struct bfq_group *bfqg;
+	struct hlist_node *n;
 	void *key;
 
-	hlist_for_each_entry_rcu(bfqg, &bgrp->group_data, group_node) {
+	hlist_for_each_entry_rcu(bfqg, n, &bgrp->group_data, group_node) {
 		key = rcu_dereference(bfqg->bfqd);
 		if (key == bfqd)
 			return bfqg;
@@ -534,10 +535,10 @@ static void bfq_destroy_group(struct bfqio_cgroup *bgrp, struct bfq_group *bfqg)
 
 static void bfq_end_raising_async(struct bfq_data *bfqd)
 {
-	struct hlist_node *tmp;
+	struct hlist_node *pos, *n;
 	struct bfq_group *bfqg;
 
-	hlist_for_each_entry_safe(bfqg, tmp, &bfqd->group_list, bfqd_node)
+	hlist_for_each_entry_safe(bfqg, pos, n, &bfqd->group_list, bfqd_node)
 		bfq_end_raising_async_queues(bfqd, bfqg);
 	bfq_end_raising_async_queues(bfqd, bfqd->root_group);
 }
@@ -552,11 +553,11 @@ static void bfq_end_raising_async(struct bfq_data *bfqd)
  */
 static void bfq_disconnect_groups(struct bfq_data *bfqd)
 {
-	struct hlist_node *tmp;
+	struct hlist_node *pos, *n;
 	struct bfq_group *bfqg;
 
 	bfq_log(bfqd, "disconnect_groups beginning");
-	hlist_for_each_entry_safe(bfqg, tmp, &bfqd->group_list, bfqd_node) {
+	hlist_for_each_entry_safe(bfqg, pos, n, &bfqd->group_list, bfqd_node) {
 		hlist_del(&bfqg->bfqd_node);
 
 		__bfq_deactivate_entity(bfqg->my_entity, 0);
@@ -649,6 +650,7 @@ static int bfqio_cgroup_##__VAR##_write(struct cgroup *cgroup,		\
 {									\
 	struct bfqio_cgroup *bgrp;					\
 	struct bfq_group *bfqg;						\
+	struct hlist_node *n;						\
 									\
 	if (val < (__MIN) || val > (__MAX))				\
 		return -EINVAL;						\
@@ -660,7 +662,7 @@ static int bfqio_cgroup_##__VAR##_write(struct cgroup *cgroup,		\
 									\
 	spin_lock_irq(&bgrp->lock);					\
 	bgrp->__VAR = (unsigned short)val;				\
-	hlist_for_each_entry(bfqg, &bgrp->group_data, group_node) {	\
+	hlist_for_each_entry(bfqg, n, &bgrp->group_data, group_node) {	\
 		/*							\
 		 * Setting the ioprio_changed flag of the entity        \
 		 * to 1 with new_##__VAR == ##__VAR would re-set        \
@@ -777,6 +779,7 @@ static void bfqio_attach(struct cgroup *cgroup, struct cgroup_taskset *tset)
 	struct task_struct *task;
 	struct io_context *ioc;
 	struct io_cq *icq;
+	struct hlist_node *n;
 
 	/*
 	 * IMPORTANT NOTE: The move of more than one process at a time to a
@@ -789,7 +792,8 @@ static void bfqio_attach(struct cgroup *cgroup, struct cgroup_taskset *tset)
 			 * Handle cgroup change here.
 			 */
 			rcu_read_lock();
-			hlist_for_each_entry_rcu(icq, &ioc->icq_list, ioc_node)
+			hlist_for_each_entry_rcu(icq, n, &ioc->icq_list,
+						 ioc_node)
 				if (!strncmp(
 					icq->q->elevator->type->elevator_name,
 					"bfq", ELV_NAME_MAX))
@@ -804,7 +808,7 @@ static void bfqio_attach(struct cgroup *cgroup, struct cgroup_taskset *tset)
 static void bfqio_destroy(struct cgroup *cgroup)
 {
 	struct bfqio_cgroup *bgrp = cgroup_to_bfqio(cgroup);
-	struct hlist_node *tmp;
+	struct hlist_node *pos, *n;
 	struct bfq_group *bfqg;
 
 	/*
@@ -814,7 +818,7 @@ static void bfqio_destroy(struct cgroup *cgroup)
 	 * cgroup is RCU-safe); bgrp->group_data will not be accessed by
 	 * anything else and we don't need any synchronization.
 	 */
-	hlist_for_each_entry_safe(bfqg, tmp, &bgrp->group_data, group_node)
+	hlist_for_each_entry_safe(bfqg, pos, n, &bgrp->group_data, group_node)
 		bfq_destroy_group(bgrp, bfqg);
 
 	BUG_ON(!hlist_empty(&bgrp->group_data));
-- 
1.9.0

