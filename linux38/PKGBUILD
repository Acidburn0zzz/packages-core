# Based on the file created for Arch Linux by:
# Tobias Powalowski <tpowa@archlinux.org>
# Thomas Baechler <thomas@archlinux.org>

# Maintainer: Philip MÃ¼ller <philm@manjaro.org>
# Maintainer: Guinux <guillaume@manjaro.org>

pkgbase=linux38
pkgname=('linux38' 'linux38-headers')
_kernelname=-MANJARO
_basekernel=3.8
_basever=38
_aufs=20131007
_zfs=0.6.2
_withzfs=no
_subver=11
pkgver=${_basekernel}.13.${_subver}
pkgrel=1
arch=('i686' 'x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc')
options=('!strip')
source=("http://www.kernel.org/pub/linux/kernel/v3.x/linux-${_basekernel}.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v3.x/patch-${_basekernel}.13.xz"
        # the main kernel config files
        'config' 'config.x86_64' 'config.aufs'
        # standard config files for mkinitcpio ramdisk
        "${pkgname}.preset"
        "aufs${_basekernel}-${_aufs}.patch.bz2"
        'aufs3-base.patch'
        'aufs3-kbuild.patch'
        'aufs3-loopback.patch'
        'aufs3-proc_map.patch'
        'aufs3-standalone.patch'
        'change-default-console-loglevel.patch'
        '3.7.0-Fix-DVB-ioctls-failing-if-frontend-open-closed-too-fast.patch'
        "http://archive.zfsonlinux.org/downloads/zfsonlinux/spl/spl-$_zfs.tar.gz"
        "http://archive.zfsonlinux.org/downloads/zfsonlinux/zfs/zfs-$_zfs.tar.gz"
        'config.zfs'
        'http://sources.gentoo.org/cgi-bin/viewvc.cgi/linux-patches/genpatches-2.6/trunk/3.8/1700_enable-thinkpad-micled.patch'
        'http://sources.gentoo.org/cgi-bin/viewvc.cgi/linux-patches/genpatches-2.6/trunk/3.8/2700_ThinkPad-30-brightness-control-fix.patch'
        'http://sources.gentoo.org/cgi-bin/viewvc.cgi/linux-patches/genpatches-2.6/trunk/3.10/4500_nouveau-video-output-control-Kconfig.patch'
        "3.8.13.1.patch"
        "3.8.13.2.patch"
        "3.8.13.3.patch"
        "3.8.13.4.patch"
        "3.8.13.5.patch"
        "3.8.13.6.patch"
        "3.8.13.7.patch"
        "3.8.13.8.patch"
        "3.8.13.9.patch"
        "3.8.13.10.patch"
        "3.8.13.11.patch"
        "http://git.kernel.org/cgit/linux/kernel/git/stable/stable-queue.git/plain/releases/3.10.10/acpi-add-_sta-evaluation-at-do_acpi_find_child.patch"
        "http://git.kernel.org/cgit/linux/kernel/git/stable/stable-queue.git/plain/releases/3.10.10/acpi-try-harder-to-resolve-_adr-collisions-for-bridges.patch"
)
sha256sums=('e070d1bdfbded5676a4f374721c63565f1c969466c5a3e214004a136b583184b'
            'abc523f59e4c7a4c8ccadd7fd3cd03b7ae8788b399040a1c949c4232601cfd5b'
            '741b147052f0d79621316bc6ca34d0f88988fea57d7fd1c090df587dcb489851'
            '363b185f5147a2defcef83fe4a105c23b6671ab06e8f5a8b6d29714a2f96a4f5'
            'b1b1cf291bd68270b700eb21f19f7b052116d07dde492761227cd94bb775910c'
            'd3be8e800b7fa0ab82700a61f7c85e4fe351f1b73688120a9a465bd34b473b19'
            'f988ec8904348e1cf20df00ece0d0883e8c00ecb0dbec0d8bc0e8c9fbef09869'
            '6f473f3faef88393a3bedf57c30487ff64b0b4173270e05280a796023c29d491'
            '2178505b162ac3b152bdac70f3291f5a0985bd5a3a3dec42882e5dd2f8e12ab6'
            'e446d94adb36a5e846fc1fbe748052732dc0d0e664c821a9a4dbe505522a0bed'
            '22d7177f49ab3642e3227d1fe0fd6f1e9019ad83dab9b1412cb227c9c144faf1'
            '8979c9d667414c8be7084035f4964bfb88c19f0836c702a8621bdfe4cf846143'
            '56bd99e54429a25a144f2d221718b67f516344ffd518fd7dcdd752206ec5be69'
            '611d11b5346e52e957d9690b7fac2464d83f1c67fe64a943b0026ffb466a5798'
            '3c577c7055d6c73179726b9c8a7fd48f9122be0b345c50cd54732e801165daa4'
            '6b8cd79486b3a51204fac07297b8c45aa8702b8dfade58f2098b5734517065a1'
            '46a5e371b395b289d499dfc8bd948c565e7d972c07eaf0b9e68b5bf025abde01'
            '8ef4a6c16e3d0df0c211fef7875089eda3821db4b1335cac79ca02511a4d6f5c'
            '9d7eab1ffec60f2b0d2121221d957f17a02918d95f11ea52902c227df5105e25'
            '59ad742a02bc24d58bc06eee584175a164cb82550b905ba9f402a6dc399d3ed1'
            'e58afecc77f9d476287f44d211e5482bc389cae49c0ecc2fcf13fd06edb18f97'
            '5cb38a485d9f764181c0a2925d597232ceb8329e822a19ace52936730ad87927'
            'fa3e91daed5928effc4e40fe5496d0ef59266880dd62b7d019b4fa280cbca73f'
            'd3c826087357f8509dd2a689be96bcef04ceec1cfa8d7a79b0d3a62c23f2a72a'
            '5bf544c716d05fb50dbce2f6705d23e5f46a4afcbda7039781d5d631ed9b89dd'
            'ff6f4e3612e7293ddb11b0693488dbcad1256161e89cdefc445211d0753e1fb2'
            '5bc0d17d70a12a8d535c5e464744e56801a8345625e89650dd3da65941fc2241'
            '0d70fdd280da0445c1f49942c043f567b0974dd2ce81da39cddda0a3e1921456'
            'dd4f5dd0ef520e261288bdd3cc8118e0dabd3d093cdc547437de0e20da1fe477'
            '0995c5623fcf5b3ab6b519f378c393d4db5d1025ddb2d242de5c983bc5f2c7a6'
            '01d9cf8a53094e35b71a360828cea3965cccc62fbb454f23d59bf0570bd22920'
            'cb505a5b9aa750490ba28facb537bfd928ff6d0dc8edc349b6ad5e202f876e69'
            'aaf27758adaf142d04ea8ba43378716d24699a884906ae1e2ef3f655695497c6'
)

## modules.symboles md5sums
#
# i686
# 49dda44247d69fd4004601c3dd450322  /lib/modules/3.10.17-1-MANJARO/modules.symbols
# eb88c266fb3470256cb06702d41dc076  /lib/modules/3.11.6-1-MANJARO/modules.symbols
# 1109b4839aeb2612839597ad9c3d8393  /lib/modules/3.12.0-1-MANJARO/modules.symbols
# ad0cd4d78cc915e1b9f6f89e00b52ff3  /lib/modules/3.4.66-1-MANJARO/modules.symbols
# f7ed00ba343e32786d6d16e767bb868f  /lib/modules/3.8.13.11-1-MANJARO/modules.symbols
# x86_64
# aa9257e0d07b7850db7be58df47f4235  /lib/modules/3.10.17-1-MANJARO/modules.symbols
# 1253b8353d7870168d7c738e962c9c63  /lib/modules/3.11.6-1-MANJARO/modules.symbols
# 24ad6166b21d058c31a0d9d978c1e21c  /lib/modules/3.12.0-1-MANJARO/modules.symbols
# 242d8b9c0e711b05561d3b8864fab7ab  /lib/modules/3.4.66-1-MANJARO/modules.symbols
# b3a2930d437cfae0aff78c9cd32db003  /lib/modules/3.8.13.11-1-MANJARO/modules.symbols

prepare() {
  cd "${srcdir}/linux-${_basekernel}"

  # add upstream patch
  patch -p1 -i "${srcdir}/patch-${_basekernel}.13"

  # add extended stable patch(es)
  patch -p1 -i "${srcdir}/3.8.13.1.patch"
  patch -p1 -i "${srcdir}/3.8.13.2.patch"
  patch -p1 -i "${srcdir}/3.8.13.3.patch"
  patch -p1 -i "${srcdir}/3.8.13.4.patch"
  patch -p1 -i "${srcdir}/3.8.13.5.patch"
  patch -p1 -i "${srcdir}/3.8.13.6.patch"
  patch -p1 -i "${srcdir}/3.8.13.7.patch"
  patch -p1 -i "${srcdir}/3.8.13.8.patch"
  patch -p1 -i "${srcdir}/3.8.13.9.patch"
  patch -p1 -i "${srcdir}/3.8.13.10.patch"
  patch -p1 -i "${srcdir}/3.8.13.11.patch"

  # add latest fixes from stable queue, if needed
  # http://git.kernel.org/?p=linux/kernel/git/stable/stable-queue.git
  # enable only if you have "gen-stable-queue-patch.sh" executed before
  #patch -Np1 -i "${srcdir}/../prepatch-${_basekernel}-`date +%Y%m%d`"

  # set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
  # remove this when a Kconfig knob is made available by upstream
  # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
  patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"

  # fix dvb issues
  # see: http://forum.manjaro.org/index.php?topic=1108.0
  patch -Np1 -i "${srcdir}/3.7.0-Fix-DVB-ioctls-failing-if-frontend-open-closed-too-fast.patch"

  # add Gentoo patches
  patch -Np1 -i "${srcdir}/1700_enable-thinkpad-micled.patch"
  patch -Np1 -i "${srcdir}/2700_ThinkPad-30-brightness-control-fix.patch"
  patch -Np1 -i "${srcdir}/4500_nouveau-video-output-control-Kconfig.patch"

  # Fix bug #60561: https://bugzilla.kernel.org/show_bug.cgi?id=60561
  patch -Np1 -i "${srcdir}/acpi-add-_sta-evaluation-at-do_acpi_find_child.patch"
  patch -Np1 -i "${srcdir}/acpi-try-harder-to-resolve-_adr-collisions-for-bridges.patch"

  # add aufs3 support
  patch -Np1 -i "${srcdir}/aufs${_basekernel}-${_aufs}.patch"
  patch -Np1 -i "${srcdir}/aufs3-base.patch"
  patch -Np1 -i "${srcdir}/aufs3-kbuild.patch"
  patch -Np1 -i "${srcdir}/aufs3-loopback.patch"
  patch -Np1 -i "${srcdir}/aufs3-proc_map.patch"
  patch -Np1 -i "${srcdir}/aufs3-standalone.patch"

  if [ "${CARCH}" = "x86_64" ]; then
    cat "${srcdir}/config.x86_64" > ./.config
  else
    cat "${srcdir}/config" > ./.config
  fi

  cat "${srcdir}/config.aufs" >> ./.config

  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
  fi

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 .${_subver}-${pkgrel}|" Makefile

  # set sublevel to prepatch
  sed -ri "s|^(SUBLEVEL =).*|\1 13|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # normally not needed
  make clean

  # get kernel version
  make prepare

  # run scripts
  make scripts

  if [ "${_withzfs}" = "yes" ]; then
   # add zfs support
   cd ${srcdir}/spl-${_zfs}
   ./autogen.sh
   if [ "${CARCH}" = "i686" ]; then
      ./configure --enable-linux-builtin --with-linux=${srcdir}/linux-${_basekernel} \
      --with-linux-obj=${srcdir}/linux-${_basekernel} --enable-atomic-spinlocks
   else
      ./configure --enable-linux-builtin --with-linux=${srcdir}/linux-${_basekernel} \
      --with-linux-obj=${srcdir}/linux-${_basekernel}
   fi
   ./copy-builtin ${srcdir}/linux-${_basekernel}
   cp spl.release.in "${srcdir}/linux-${_basekernel}/"
   cd ${srcdir}/zfs-${_zfs}
   ./autogen.sh
   ./configure --enable-linux-builtin --with-linux=${srcdir}/linux-${_basekernel} \
   --with-linux-obj=${srcdir}/linux-${_basekernel}
   ./copy-builtin ${srcdir}/linux-${_basekernel}
   cat "${srcdir}/config.zfs" >> ${srcdir}/linux-${_basekernel}/.config
  fi
}

build() {
  cd "${srcdir}/linux-${_basekernel}"
  # get kernel version
  make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"
  #return 1
  ####################

  yes "" | make config

  # build!
  make ${MAKEFLAGS} bzImage modules
}

package_linux38() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules"
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  if [ "${_withzfs}" = "yes" ]; then
     provides=("linux=${pkgver}" "spl-modules=${_zfs}" "zfs-modules=${_zfs}")
     replaces=("linux${_basever}-spl" "linux${_basever}-zfs")
     conflicts=("linux${_basever}-spl" "linux${_basever}-zfs")
  else
     provides=("linux=${pkgver}")
  fi
  install=${pkgname}.install

  cd "${srcdir}/linux-${_basekernel}"

  KARCH=x86

  # get kernel version
  _kernver="$(make kernelrelease)"

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
  make INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${_basever}-${CARCH}"

  # add kernel version
  if [ "${CARCH}" = "x86_64" ]; then
     echo "${pkgver}-${pkgrel}-MANJARO x64" > "${pkgdir}/boot/${pkgbase}-${CARCH}.kver"
  else
     echo "${pkgver}-${pkgrel}-MANJARO x32" > "${pkgdir}/boot/${pkgbase}-${CARCH}.kver"
  fi

  # add vmlinux
  install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

  # install fallback mkinitcpio.conf file and preset file for kernel
  install -D -m644 "${srcdir}/${pkgname}.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # set correct depmod command for install
  sed \
    -e  "s/RELEASE=.*/RELEASE=${pkgver}-${pkgrel}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -e  "s/KERNEL_BASE=.*/KERNEL_BASE=${_basekernel}/g" \
    -e  "s/BASEVER=.*/BASEVER=${_basever}/g" \
    -e  "s/ARCH=.*/ARCH=${CARCH}/g" \
    -i "${startdir}/${pkgname}.install"
  sed \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${_basever}-${CARCH}\"|g" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-${_basever}-${CARCH}.img\"|g" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${_basever}-${CARCH}-fallback.img\"|g" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname:--MANJARO}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--MANJARO}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--MANJARO}/version"

  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "$_kernver"

  # move module tree /lib -> /usr/lib
  mv "$pkgdir/lib" "$pkgdir/usr"
}

package_linux38-headers() {
  pkgdesc="Header files and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  provides=("linux-headers=$pkgver")
  if [ "${_withzfs}" = "yes" ]; then
     replaces=('spl-common' 'zfs-common')
     conflicts=('spl-common' 'zfs-common')
  fi

  install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

  cd "${pkgdir}/usr/lib/modules/${_kernver}"
  ln -sf ../../../src/linux-${_kernver} build

  cd "${srcdir}/linux-${_basekernel}"
  install -D -m644 Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Makefile"
  install -D -m644 kernel/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile"
  install -D -m644 .config \
    "${pkgdir}/usr/src/linux-${_kernver}/.config"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include"

  for i in acpi asm-generic config crypto drm generated linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    cp -a include/${i} "${pkgdir}/usr/src/linux-${_kernver}/include/"
  done

  # copy arch includes for external modules
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/x86"
  cp -a arch/x86/include "${pkgdir}/usr/src/linux-${_kernver}/arch/x86/"

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers "${pkgdir}/usr/src/linux-${_kernver}"
  cp -a scripts "${pkgdir}/usr/src/linux-${_kernver}"

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/scripts"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel"

  cp arch/${KARCH}/Makefile "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"

  if [ "${CARCH}" = "i686" ]; then
    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"
  fi

  cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel/"

  # add headers for lirc package
  # pci
  for i in bt8xx cx88 saa7134; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
    cp -a drivers/media/pci/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
  done
  # usb
  for i in cpia2 em28xx pwc sn9c102; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
    cp -a drivers/media/usb/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
  done
  # i2c
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c"
  cp drivers/media/i2c/*.h  "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"
  for i in cx25840; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
    cp -a drivers/media/i2c/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
  done

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/src/linux-${_kernver}/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core"
  cp drivers/media/dvb-core/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"
  cp include/config/dvb/*.h "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb"
  cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends"
  cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners"
  cp drivers/media/tuners/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/mm"
  cp fs/xfs/xfs_sb.h "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h"

  # fix aufs_type.h
  sed -i "s:__user::g" "${pkgdir}/usr/src/linux-${_kernver}/include/linux/aufs_type.h"


  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do
    mkdir -p "${pkgdir}"/usr/src/linux-${_kernver}/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/src/linux-${_kernver}/${i}"
  done

  chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}"
  find "${pkgdir}/usr/src/linux-${_kernver}" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/src/linux-${_kernver}/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}
