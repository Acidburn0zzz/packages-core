#!/usr/bin/env bash

##
## grub-mkconfig helper script specific to Manjaro Linux
## Contributed by "Keshav Padram Amburay" <the ddoott ridikulus ddoott rat aatt geemmayil ddoott ccoomm>
## Modified for Manjaro Linux by "Philip MÃ¼ller" <philm aat manjaro ddoott org>
##
## Script based on do_grub_config() function in Arch Linux Archboot ISO Installer/Setup script 
## Some parts taken from /etc/grub.d/10_linux script shipped by GRUB(2) upstream
##
## This script can be freely distributed and/or modified 
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This script is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##

set -e

prefix="/usr"
exec_prefix="${prefix}"
datarootdir="/usr/share"

. "${datarootdir}/grub/grub-mkconfig_lib"

if [ "x${GRUB_DISTRIBUTOR}" != "xManjaro" ] ; then
  echo "This script only works on Manjaro Linux - skipping ..." >&2
  exit
fi

export TEXTDOMAIN="grub"
export TEXTDOMAINDIR="${datarootdir}/locale"

CLASS="--class manjaro-linux --class manjaro --class gnu-linux --class gnu --class os"

BOOT_PART_FS_UUID="$(grub-probe --target="fs_uuid" "/boot" 2>/dev/null)"
BOOT_PART_HINTS_STRING="$(grub-probe --target="hints_string" "/boot" 2>/dev/null)"
BOOT_PART_FS="$(grub-probe --target="fs" "/boot" 2>/dev/null)"

ROOT_PART_FS_UUID="$(grub-probe --target="fs_uuid" "/" 2>/dev/null)"
ROOT_PART_HINTS_STRING="$(grub-probe --target="hints_string" "/" 2>/dev/null)"
ROOT_PART_FS="$(grub-probe --target="fs" "/" 2>/dev/null)"

if [[ "${ROOT_PART_FS_UUID}" == "${BOOT_PART_FS_UUID}" ]]; then
    SUBDIR="/boot"
else
    SUBDIR=""
fi

if [[ "${GRUB_LINUX_ROOT_DEVICE}" == "" ]]; then
    if [[ "${GRUB_DEVICE_UUID}" == "" ]] || \
       [[ "${GRUB_DISABLE_LINUX_UUID}" == "true" ]] || \
       [[ ! -e "/dev/disk/by-uuid/${GRUB_DEVICE_UUID}" ]] || \
       uses_abstraction "${GRUB_DEVICE}" lvm ; then
           GRUB_LINUX_ROOT_DEVICE="${GRUB_DEVICE}"
    else
       GRUB_LINUX_ROOT_DEVICE="UUID=${GRUB_DEVICE_UUID}"
    fi
fi

[[ "${GRUB_LINUX_PARAMS}" == "" ]] && GRUB_LINUX_PARAMS="${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}"

_MACHINE_=`uname -m`
case "x${_MACHINE_}" in
    xi?86 | xx86_64)
	_LIST_=`for i in /boot/vmlinuz-* /vmlinuz-* /boot/kernel-* ; do
                  if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
              done` ;;
    *) 
	_LIST_=`for i in /boot/vmlinuz-* /boot/vmlinux-* /vmlinuz-* /vmlinux-* /boot/kernel-* ; do
                  if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
	     done` ;;
esac

while [ "x${_LIST_}" != "x" ] ; do
    _KERNEL_=`version_find_latest ${_LIST_}`
    echo "Found linux image: ${_KERNEL_}" >&2
    
    _KERNEL_FILE_="$(echo ${_KERNEL_} | sed 's,/boot/,,g')"
    _KERNEL_BASE_="$(echo ${_KERNEL_FILE_} | sed -e 's,vmlinuz-,linux,g')"
    if test -e "/boot/${_KERNEL_BASE_}.kver" ; then
       _KERNEL_VER_="$(cat /boot/${_KERNEL_BASE_}.kver)"
    elif test -e "/${_KERNEL_BASE_}.kver" ; then
       _KERNEL_VER_="$(cat /${_KERNEL_BASE_}.kver)"
    else
       _KERNEL_VER_="$(echo ${_KERNEL_FILE_} | sed -e 's,vmlinuz-,,g')"
    fi
    
    _INITRAMFS_="${_KERNEL_FILE_/vmlinuz-/initramfs-}.img"
    
    if [[ -e "/boot/${_INITRAMFS_}" ]]; then
    
    echo "Found initramfs image: /boot/${_INITRAMFS_}" >&2
    
cat << EOF

menuentry "Manjaro Linux (Kernel: ${_KERNEL_VER_})" ${CLASS} {
    if [ x\$feature_all_video_module = xy ]; then
        insmod all_video
    fi
    set gfxpayload=keep
    insmod ${BOOT_PART_FS}
    if [ x\$feature_platform_search_hint = xy ]; then
        search --no-floppy --fs-uuid  --set=root ${BOOT_PART_HINTS_STRING} ${BOOT_PART_FS_UUID}
    else
        search --no-floppy --fs-uuid  --set=root ${BOOT_PART_FS_UUID}
    fi
    echo 'Loading Manjaro Linux ${_KERNEL_VER_} kernel ...'
    linux ${SUBDIR}/${_KERNEL_FILE_} root=${GRUB_LINUX_ROOT_DEVICE} rw ${GRUB_LINUX_PARAMS}
    echo 'Loading Manjaro Linux ${_KERNEL_VER_} kernel initramfs ...'
    initrd ${SUBDIR}/${_INITRAMFS_}
}

EOF
    fi
    
    _INITRAMFS_FALLBACK_="${_KERNEL_FILE_/vmlinuz-/initramfs-}-fallback.img"
    
    if [[ -e "/boot/${_INITRAMFS_FALLBACK_}" ]]; then
    
    echo "Found fallback initramfs image: /boot/${_INITRAMFS_FALLBACK_}" >&2
    
cat << EOF

menuentry "Manjaro Linux (Kernel: ${_KERNEL_VER_} - fallback initramfs)" ${CLASS} {
    if [ x\$feature_all_video_module = xy ]; then
        insmod all_video
    fi
    set gfxpayload=keep
    insmod ${BOOT_PART_FS}
    if [ x\$feature_platform_search_hint = xy ]; then
        search --no-floppy --fs-uuid  --set=root ${BOOT_PART_HINTS_STRING} ${BOOT_PART_FS_UUID}
    else
        search --no-floppy --fs-uuid  --set=root ${BOOT_PART_FS_UUID}
    fi
    echo 'Loading Manjaro Linux ${_KERNEL_VER_} kernel ...'
    linux ${SUBDIR}/${_KERNEL_FILE_} root=${GRUB_LINUX_ROOT_DEVICE} rw ${GRUB_LINUX_PARAMS}
    echo 'Loading Manjaro Linux ${_KERNEL_VER_} kernel fallback initramfs ...'
    initrd ${SUBDIR}/${_INITRAMFS_FALLBACK_}
}

EOF
    fi
    
    if [[ ! -e "/boot/${_INITRAMFS_}" ]] && [[ ! -e "/boot/${_INITRAMFS_FALLBACK_}" ]]; then
cat << EOF

menuentry "Manjaro Linux (Kernel: ${_KERNEL_VER_} - no initramfs)" ${CLASS} {
    if [ x\$feature_all_video_module = xy ]; then
        insmod all_video
    fi
    set gfxpayload=keep
    insmod ${BOOT_PART_FS}
    if [ x\$feature_platform_search_hint = xy ]; then
        search --no-floppy --fs-uuid  --set=root ${BOOT_PART_HINTS_STRING} ${BOOT_PART_FS_UUID}
    else
        search --no-floppy --fs-uuid  --set=root ${BOOT_PART_FS_UUID}
    fi
    echo 'Loading Manjaro Linux ${_KERNEL_VER_} kernel ...'
    linux ${SUBDIR}/${_KERNEL_FILE_} root=${GRUB_LINUX_ROOT_DEVICE} rw ${GRUB_LINUX_PARAMS}
}

EOF
    fi
    _LIST_=`echo ${_LIST_} | tr ' ' '\n' | grep -vx $_KERNEL_ | tr '\n' ' '`
done
